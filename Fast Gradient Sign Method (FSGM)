#install packages
library(tidyverse)
library(keras)
library(tensorflow)
library(reticulate)
library(jpeg)

#set working directory to wherever you saved the project files
setwd("C:/Users/rajes/Downloads")
getwd()

#code to load model
model <- load_model_tf("./dandelion_model")
summary(model)

#function that makes modifies images
#image is the image to be changed
#P is the percent of pixels I get to change
random <- function (x, P) {
  x_size <- length(x[,1,1])
  y_size <- length(x[1,,1])
  #loop through image
  for (i in 1:x_size) {
    for (j in 1:y_size) {
      if ((((j-1) * x_size) + i) %% P == 0) {  #condition for what pixels you want to change
        x[i,j,1] <- 1 #modifies red value
        x[i,j,2] <- 1 #modifies green value
        x[i,j,3] <- 0 #modifies blue value
      }
    }
  }
  # Convert the modified x array back to an image
  writeJPEG(x, "./grass/modified_grass.jpg")
  
  # Read the modified image file
  modified_image <- jpeg::readJPEG("./grass/modified_grass.jpg")
  
  # Display the modified image
  graphics::plot(1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="", ylab="")
  graphics::rasterImage(modified_image, 0, 0, 1, 1)
}

# FGSM perturbation function
fgsm_perturbation <- function(image, model, epsilon, target_label) {
  image_tensor <- k_constant(array_reshape(image, c(1, dim(image))))
  perturbation <- k_zeros_like(image_tensor)
  
  target_label <- array_reshape(target_label, c(1, length(target_label))) # Reshape target_label
  
  loss_fn <- function(x, target_label) {
    logits <- model(x)
    return(k_categorical_crossentropy(target_label, logits))
  }
  
  with(tf$GradientTape() %as% tape, {
    tape$watch(image_tensor)
    loss_value <- loss_fn(image_tensor, target_label)
  })
  grads <- tape$gradient(loss_value, image_tensor)
  
  perturbation <- epsilon * k_sign(grads)
  
  return(perturbation)
}



#testing
target_size <- c(224, 224)


# Grass images
res=c("","")
f=list.files("./grass")
for (i in f){
  test_image <- image_load(paste("./grass/",i,sep=""),
                           target_size = target_size)
  x <- image_to_array(test_image)
  x <- x/255
  
  epsilon <- 0.30
  target_label <- k_constant(c(1, 0)) # Target label for dandelion
  perturbation <- fgsm_perturbation(x, model, epsilon, target_label)
  perturbed_image <- k_eval(k_constant(array_reshape(x, c(1, dim(x)))) + perturbation)
  perturbed_image <- k_clip(perturbed_image, 0, 1)
  perturbed_image <- array_reshape(perturbed_image, c(224, 224, 3))
  
  pred <- model %>% predict(array_reshape(perturbed_image, c(1, 224, 224, 3)))
  print(pred)
}


# Dandelion images
res=c("","")
f=list.files("./dandelions")
for (i in f){
  test_image <- image_load(paste("./dandelions/",i,sep=""),
                           target_size = target_size)
  x <- image_to_array(test_image)
  x <- x/255
  
  epsilon <- 0.30
  target_label <- k_constant(c(0, 1)) # Target label for grass
  perturbation <- fgsm_perturbation(x, model, epsilon, target_label)
  perturbed_image <- k_eval(k_constant(array_reshape(x, c(1, dim(x)))) + perturbation)
  
  perturbed_image <- k_clip(perturbed_image, 0, 1)
  perturbed_image <- array_reshape(perturbed_image, c(224, 224, 3))
  
  pred <- model %>% predict(array_reshape(perturbed_image, c(1, 224, 224, 3)))
  print(pred)
}
